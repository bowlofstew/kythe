// Code generated by protoc-gen-go.
// source: third_party/bazel/src/main/protobuf/test_status.proto
// DO NOT EDIT!

/*
Package test_status_proto is a generated protocol buffer package.

It is generated from these files:
	third_party/bazel/src/main/protobuf/test_status.proto

It has these top-level messages:
	TestCase
	TestResultData
*/
package test_status_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Status data of test cases which failed (used only for printing test summary)
type FailedTestCasesStatus int32

const (
	// * Information about every test case is available.
	FailedTestCasesStatus_FULL FailedTestCasesStatus = 1
	// * Information about some test cases may be missing.
	FailedTestCasesStatus_PARTIAL FailedTestCasesStatus = 2
	// * No information about individual test cases.
	FailedTestCasesStatus_NOT_AVAILABLE FailedTestCasesStatus = 3
	// * This is an empty object still without data.
	FailedTestCasesStatus_EMPTY FailedTestCasesStatus = 4
)

var FailedTestCasesStatus_name = map[int32]string{
	1: "FULL",
	2: "PARTIAL",
	3: "NOT_AVAILABLE",
	4: "EMPTY",
}
var FailedTestCasesStatus_value = map[string]int32{
	"FULL":          1,
	"PARTIAL":       2,
	"NOT_AVAILABLE": 3,
	"EMPTY":         4,
}

func (x FailedTestCasesStatus) Enum() *FailedTestCasesStatus {
	p := new(FailedTestCasesStatus)
	*p = x
	return p
}
func (x FailedTestCasesStatus) String() string {
	return proto.EnumName(FailedTestCasesStatus_name, int32(x))
}
func (x *FailedTestCasesStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FailedTestCasesStatus_value, data, "FailedTestCasesStatus")
	if err != nil {
		return err
	}
	*x = FailedTestCasesStatus(value)
	return nil
}

// Detailed status data for a TestRunnerAction execution.
type BlazeTestStatus int32

const (
	BlazeTestStatus_NO_STATUS                   BlazeTestStatus = 0
	BlazeTestStatus_PASSED                      BlazeTestStatus = 1
	BlazeTestStatus_FLAKY                       BlazeTestStatus = 2
	BlazeTestStatus_TIMEOUT                     BlazeTestStatus = 3
	BlazeTestStatus_FAILED                      BlazeTestStatus = 4
	BlazeTestStatus_INCOMPLETE                  BlazeTestStatus = 5
	BlazeTestStatus_REMOTE_FAILURE              BlazeTestStatus = 6
	BlazeTestStatus_FAILED_TO_BUILD             BlazeTestStatus = 7
	BlazeTestStatus_BLAZE_HALTED_BEFORE_TESTING BlazeTestStatus = 8
)

var BlazeTestStatus_name = map[int32]string{
	0: "NO_STATUS",
	1: "PASSED",
	2: "FLAKY",
	3: "TIMEOUT",
	4: "FAILED",
	5: "INCOMPLETE",
	6: "REMOTE_FAILURE",
	7: "FAILED_TO_BUILD",
	8: "BLAZE_HALTED_BEFORE_TESTING",
}
var BlazeTestStatus_value = map[string]int32{
	"NO_STATUS":                   0,
	"PASSED":                      1,
	"FLAKY":                       2,
	"TIMEOUT":                     3,
	"FAILED":                      4,
	"INCOMPLETE":                  5,
	"REMOTE_FAILURE":              6,
	"FAILED_TO_BUILD":             7,
	"BLAZE_HALTED_BEFORE_TESTING": 8,
}

func (x BlazeTestStatus) Enum() *BlazeTestStatus {
	p := new(BlazeTestStatus)
	*p = x
	return p
}
func (x BlazeTestStatus) String() string {
	return proto.EnumName(BlazeTestStatus_name, int32(x))
}
func (x *BlazeTestStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(BlazeTestStatus_value, data, "BlazeTestStatus")
	if err != nil {
		return err
	}
	*x = BlazeTestStatus(value)
	return nil
}

type TestCase_Type int32

const (
	TestCase_TEST_CASE      TestCase_Type = 0
	TestCase_TEST_SUITE     TestCase_Type = 1
	TestCase_TEST_DECORATOR TestCase_Type = 2
	TestCase_UNKNOWN        TestCase_Type = 3
)

var TestCase_Type_name = map[int32]string{
	0: "TEST_CASE",
	1: "TEST_SUITE",
	2: "TEST_DECORATOR",
	3: "UNKNOWN",
}
var TestCase_Type_value = map[string]int32{
	"TEST_CASE":      0,
	"TEST_SUITE":     1,
	"TEST_DECORATOR": 2,
	"UNKNOWN":        3,
}

func (x TestCase_Type) Enum() *TestCase_Type {
	p := new(TestCase_Type)
	*p = x
	return p
}
func (x TestCase_Type) String() string {
	return proto.EnumName(TestCase_Type_name, int32(x))
}
func (x *TestCase_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestCase_Type_value, data, "TestCase_Type")
	if err != nil {
		return err
	}
	*x = TestCase_Type(value)
	return nil
}

type TestCase_Status int32

const (
	TestCase_PASSED TestCase_Status = 0
	TestCase_FAILED TestCase_Status = 1
	TestCase_ERROR  TestCase_Status = 2
)

var TestCase_Status_name = map[int32]string{
	0: "PASSED",
	1: "FAILED",
	2: "ERROR",
}
var TestCase_Status_value = map[string]int32{
	"PASSED": 0,
	"FAILED": 1,
	"ERROR":  2,
}

func (x TestCase_Status) Enum() *TestCase_Status {
	p := new(TestCase_Status)
	*p = x
	return p
}
func (x TestCase_Status) String() string {
	return proto.EnumName(TestCase_Status_name, int32(x))
}
func (x *TestCase_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestCase_Status_value, data, "TestCase_Status")
	if err != nil {
		return err
	}
	*x = TestCase_Status(value)
	return nil
}

// TestCase contains detailed data about all tests (cases/suites/decorators)
// ran, structured in a tree. This data will be later used to present the tests
// by the web status server.
type TestCase struct {
	Child             []*TestCase      `protobuf:"bytes,1,rep,name=child" json:"child,omitempty"`
	Name              *string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ClassName         *string          `protobuf:"bytes,3,opt,name=class_name" json:"class_name,omitempty"`
	RunDurationMillis *int64           `protobuf:"varint,4,opt,name=run_duration_millis" json:"run_duration_millis,omitempty"`
	Result            *string          `protobuf:"bytes,5,opt,name=result" json:"result,omitempty"`
	Type              *TestCase_Type   `protobuf:"varint,6,opt,name=type,enum=blaze.TestCase_Type" json:"type,omitempty"`
	Status            *TestCase_Status `protobuf:"varint,7,opt,name=status,enum=blaze.TestCase_Status" json:"status,omitempty"`
	Run               *bool            `protobuf:"varint,8,opt,name=run,def=1" json:"run,omitempty"`
	XXX_unrecognized  []byte           `json:"-"`
}

func (m *TestCase) Reset()         { *m = TestCase{} }
func (m *TestCase) String() string { return proto.CompactTextString(m) }
func (*TestCase) ProtoMessage()    {}

const Default_TestCase_Run bool = true

func (m *TestCase) GetChild() []*TestCase {
	if m != nil {
		return m.Child
	}
	return nil
}

func (m *TestCase) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TestCase) GetClassName() string {
	if m != nil && m.ClassName != nil {
		return *m.ClassName
	}
	return ""
}

func (m *TestCase) GetRunDurationMillis() int64 {
	if m != nil && m.RunDurationMillis != nil {
		return *m.RunDurationMillis
	}
	return 0
}

func (m *TestCase) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *TestCase) GetType() TestCase_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return TestCase_TEST_CASE
}

func (m *TestCase) GetStatus() TestCase_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return TestCase_PASSED
}

func (m *TestCase) GetRun() bool {
	if m != nil && m.Run != nil {
		return *m.Run
	}
	return Default_TestCase_Run
}

// TestResultData holds the outcome data for a single test action (A
// single test rule can result in multiple actions due to sharding and
// runs_per_test settings.)
type TestResultData struct {
	// The following two fields are used for TestRunnerAction caching.
	// This reflects the fact that failing tests are successful
	// actions that might be cached, depending on option settings.
	Cachable   *bool `protobuf:"varint,1,opt,name=cachable" json:"cachable,omitempty"`
	TestPassed *bool `protobuf:"varint,2,opt,name=test_passed" json:"test_passed,omitempty"`
	// Following data is informational.
	Status      *BlazeTestStatus `protobuf:"varint,3,opt,name=status,enum=blaze.BlazeTestStatus,def=0" json:"status,omitempty"`
	FailedLogs  []string         `protobuf:"bytes,4,rep,name=failed_logs" json:"failed_logs,omitempty"`
	Warning     []string         `protobuf:"bytes,5,rep,name=warning" json:"warning,omitempty"`
	HasCoverage *bool            `protobuf:"varint,6,opt,name=has_coverage" json:"has_coverage,omitempty"`
	// Returns if this was cached in remote execution.
	RemotelyCached *bool `protobuf:"varint,7,opt,name=remotely_cached" json:"remotely_cached,omitempty"`
	// Returns true if this was executed remotely
	IsRemoteStrategy *bool `protobuf:"varint,8,opt,name=is_remote_strategy" json:"is_remote_strategy,omitempty"`
	// All associated test times (in ms).
	TestTimes []int64 `protobuf:"varint,9,rep,name=test_times" json:"test_times,omitempty"`
	// Passed log paths. Set if the test passed.
	PassedLog *string `protobuf:"bytes,10,opt,name=passed_log" json:"passed_log,omitempty"`
	// Test times, without remote execution overhead (in ms).
	TestProcessTimes []int64 `protobuf:"varint,11,rep,name=test_process_times" json:"test_process_times,omitempty"`
	// Total time in ms.
	RunDurationMillis *int64 `protobuf:"varint,12,opt,name=run_duration_millis" json:"run_duration_millis,omitempty"`
	// Additional build info
	TestCase         *TestCase              `protobuf:"bytes,13,opt,name=test_case" json:"test_case,omitempty"`
	FailedStatus     *FailedTestCasesStatus `protobuf:"varint,14,opt,name=failed_status,enum=blaze.FailedTestCasesStatus" json:"failed_status,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *TestResultData) Reset()         { *m = TestResultData{} }
func (m *TestResultData) String() string { return proto.CompactTextString(m) }
func (*TestResultData) ProtoMessage()    {}

const Default_TestResultData_Status BlazeTestStatus = BlazeTestStatus_NO_STATUS

func (m *TestResultData) GetCachable() bool {
	if m != nil && m.Cachable != nil {
		return *m.Cachable
	}
	return false
}

func (m *TestResultData) GetTestPassed() bool {
	if m != nil && m.TestPassed != nil {
		return *m.TestPassed
	}
	return false
}

func (m *TestResultData) GetStatus() BlazeTestStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_TestResultData_Status
}

func (m *TestResultData) GetFailedLogs() []string {
	if m != nil {
		return m.FailedLogs
	}
	return nil
}

func (m *TestResultData) GetWarning() []string {
	if m != nil {
		return m.Warning
	}
	return nil
}

func (m *TestResultData) GetHasCoverage() bool {
	if m != nil && m.HasCoverage != nil {
		return *m.HasCoverage
	}
	return false
}

func (m *TestResultData) GetRemotelyCached() bool {
	if m != nil && m.RemotelyCached != nil {
		return *m.RemotelyCached
	}
	return false
}

func (m *TestResultData) GetIsRemoteStrategy() bool {
	if m != nil && m.IsRemoteStrategy != nil {
		return *m.IsRemoteStrategy
	}
	return false
}

func (m *TestResultData) GetTestTimes() []int64 {
	if m != nil {
		return m.TestTimes
	}
	return nil
}

func (m *TestResultData) GetPassedLog() string {
	if m != nil && m.PassedLog != nil {
		return *m.PassedLog
	}
	return ""
}

func (m *TestResultData) GetTestProcessTimes() []int64 {
	if m != nil {
		return m.TestProcessTimes
	}
	return nil
}

func (m *TestResultData) GetRunDurationMillis() int64 {
	if m != nil && m.RunDurationMillis != nil {
		return *m.RunDurationMillis
	}
	return 0
}

func (m *TestResultData) GetTestCase() *TestCase {
	if m != nil {
		return m.TestCase
	}
	return nil
}

func (m *TestResultData) GetFailedStatus() FailedTestCasesStatus {
	if m != nil && m.FailedStatus != nil {
		return *m.FailedStatus
	}
	return FailedTestCasesStatus_FULL
}

func init() {
	proto.RegisterEnum("blaze.FailedTestCasesStatus", FailedTestCasesStatus_name, FailedTestCasesStatus_value)
	proto.RegisterEnum("blaze.BlazeTestStatus", BlazeTestStatus_name, BlazeTestStatus_value)
	proto.RegisterEnum("blaze.TestCase_Type", TestCase_Type_name, TestCase_Type_value)
	proto.RegisterEnum("blaze.TestCase_Status", TestCase_Status_name, TestCase_Status_value)
}
